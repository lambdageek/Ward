//
// Coop checkpoints
coop_can_checkpoint implicit "coop checkpoint (and no GC) in region";

////////////////////////////////////////////////////////////////////////////////
// SGen
////////////////////////////////////////////////////////////////////////////////

// sgen_lock_gc "take the GC lock"
//   -> !sgen_gc_locked "can't take the GC lock when it's already held";

// sgen_gc_locked "assume the GC is locked";

// sgen_stop_world "stop the world"
//   -> sgen_gc_locked "can only stop the world when the GC is locked"
//   -> !sgen_world_stopped "can't stop the world when it's already stopped";

// sgen_world_stopped "assume the world is stopped";

////////////////////////////////////////////////////////////////////////////////
// Signal safety
////////////////////////////////////////////////////////////////////////////////

// malloc implicit "allocate malloc memory";
// signal_unsafe implicit "use async signal-unsafe functions";

////////////////////////////////////////////////////////////////////////////////
// Locking
////////////////////////////////////////////////////////////////////////////////

// lock_loader "take the loader lock"
//   -> !(domain_locked(?) | domain_jit_locked(?) | sgen_gc_locked)
//     "can't take the loader lock when a lower-level lock is already held";
//
// loader_locked
//   "assume the loader is locked";
//
// lock_domain(d) "lock a domain"
//   -> !domain_locked(d) "can't lock a domain when its lock is already held";
//
// domain_locked(d) "assume a domain is locked";
//
// lock_domain_jit(d)
//   -> !domain_jit_locked(d) "can't lock a domain JIT when its lock is already held";
//
// domain_jit_locked(d) "assume a domain is locked";

////////////////////////////////////////////////////////////////////////////////
// Program phases?
////////////////////////////////////////////////////////////////////////////////

// starting_up "assume the runtime is starting up"
//   -> !shutting_down "can't run startup functions while shutting down";
//
// shutting_down "assume the runtime is shutting down"
//   -> !starting_up "can't run shutdown functions while the runtime is starting up";

////////////////////////////////////////////////////////////////////////////////
// Annotation Enforcement
////////////////////////////////////////////////////////////////////////////////

// Module-level enforcement: the following files are considered "modules":
// annotations are required on all top-level functions declared or defined in
// paths ending with these strings.

// .enforce "sgen/gc-internal-agnostic.h";
// .enforce "sgen/sgen-gc.h";
// .enforce "sgen/sgen-client.h";
// .enforce "sgen/sgen-memory-governor.h";

// Additional functions to enforce go here, possibly including a path to
// disambiguate static functions.
//
// .enforce mono_foo_bar;
// .enforce "some_path.c" quux;
